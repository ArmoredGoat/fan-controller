[GENERAL]

# LOOP_DURATION is the time in seconds a loop should last. A loop consists of
# measuring the temperature and RPM, setting the fan speed and exporting the
# values.
# Usually, a duration of 30 seconds should be enough as rapid changes of
# temperature are not expected.
LOOP_DURATION = 30

[GPIO]

# Set the numbers of the used pins (BCM notation). See https://pinout.xyz/
 
# PWM_GPIO sets the pin from which the PWM (Pulse-width Modulation) signal 
# is send to the fan controller.
# PWM-capable pins: 12, 13, 18, 19
PWM_GPIO = 18

# RPM_GPIO sets the pin which collects the RPM signal from the open collector
# on the fan. In general, any GPIO pin is capable of receiving this signal.
RPM_GPIO = 24

[TEMPERATURE]

# Path to the file which is generated by your 1-wire temperature sensor.
# As of now, only the DS18B20 sensor is supported because I do not have 
# any other sensors lying around to test them.
# The file should be at this path: /sys/bus/w1/devices/[IDENTIFIER]/w1_slave 
PATH_TEMPERATURE_FILE = /sys/bus/w1/devices/28-00000ca660dd/w1_slave

# Temperature threshold in degrees Celsius to which the duty cycle is
# orientated. These values are highly depending on personnel
# preferences, location, season, etc. Below the first threshold 
# DUTY_CYCLE_MIN is applied. Above the last threshold DUTY_CYCLE_MAX is applied.
#
# Therefore, at least two values are required.
#
# Just test what works for your setup and set these thresholds to your liking.
THRESHOLDS = [22, 27, 32, 40]

# To prevent the fans from spinning up and down every other loop
# when the (ambient) temperature is close above a threshold, I implemented
# a hysteresis (https://en.wikipedia.org/wiki/Hysteresis). The hysteresis
# delays the spin down after passing a lower threshold by amount of degrees
# Celsius set below. For instance, your hysteresis is set to 2 and your 
# threshold is 22 degrees Celsius and your system is cooling down from 25
# degrees. The fans will only spin down when the 20 degrees Celsius are reached.
HYSTERESIS = 2

# For the case that the temperature is stuck between a threshold and the set 
# hysteresis, a counter is incremented every loop the temperature is betweens
# these values. When the counter reaches the value set below it reevaluates the
# fan speed and sets it to the value it would normally has at this temperature.
# HYSTERESIS_STUCK_COUNTER = 10 in combination with LOOP_DURATION = 30 would
# mean that the fan-speed will be reevaluated after 5 minutes.
HYSTERESIS_STUCK_COUNTER = 10

[PWM]

# PWM (Pulse-width Modulation) duty-cycles are used to tell the fans at which 
# speed they
# should spin. A signal of 20% PWM would mean that the fans should spin at 
# 20% of their maximum speed. The function which sends this signal to the fans
# accepts values between 0 and 255. 20% PWM correspond to 51, 100% to 255 
# and 0% to 0. Most fans will support values above 20%. Operation below 20% are
# not officially supported, in general.
# Check your fan manufacturer's white papers or your fans' specifications to get
# to know what your fans are capable of.
# For example, my Noctua NF-P12 Redux 1300 should work below 20%.
# www.noctua.at/pub/media/wysiwyg/Noctua_PWM_specifications_white_paper.pdf

# DUTY_CYCLE_MIN sets the duty-dycle at which your fans operate on a base line
# (e.g. below the first threshold). Usually, 51 (≃ 20% fan speed) is a good 
# base line and should be supported by most 4-pin fans.
DUTY_CYCLE_MIN = 51

# DUTY_CYCLE_MAX sets the duty-dycle at which your fans operate above the 
# last threshold. Set 255 (≃ 100% fan speed) if necessary, but 204 (≃ 80% fan
# speed) should suffice.
DUTY_CYCLE_MAX = 255

# To set other fan speeds besides a min and max value, values in between are
# necessary. Set DUTY_CYCLE_VALUES = auto to let the fan controller generate
# values with equal spacing beetween DUTY_CYCLE_MIN and DUTY_CYCLE_MAX.
# If N thresholds are set, N-1 additional duty-cycle values are needed.
# The values have to be ascending integers between DUTY_CYCLE_MIN and 
# DUTY_CYCLE_MAX.

# For instance, when you want your own duty-cycle values, enter:
# THRESHOLDS = [22, 27, 32, 40]
# DUTY_CYCLE_MIN = 51
# DUTY_CYCLE_MAX = 255
# DUTY_CYCLE_VALUES = [90, 160, 200]
DUTY_CYCLE_VALUES = auto

[PROMETHEUS]

# The fan controller is capable of exporting metrics (temperature, RPM 
# and set duty-cycle) to a Prometheus server which can be used in Grafana 
# and so on. 

# To enable this feature, set ENABLE_PROMETHEUS_EXPORTER = True.
ENABLE_PROMETHEUS_EXPORTER = True 

# PROMETHEUS_PORT sets the port at which the metrics are exposed. Set to
# a different port if port below is already in use.
# If your Prometheus server can not reach this client, check the firewall
# settings on your fan controller.
PROMETHEUS_PORT = 8080

[LOCAL EXPORT]

# The fan controller is capable of exporting metrics (temperature, RPM 
# and set duty-cycle) to a local file. By default, this is deactivated
# as it is kinda redundant if the metrics are already exported to
# Prometheus.
# Activate this setting, if you do want to process the data locally.

# To enable this feature, set ENABLE_LOCAL_EXPORT = True.
ENABLE_LOCAL_EXPORT = False

# Path to local file. If the path does not exist, the controller will
# attempt to create the dictionaries. Make sure that permissions are
# correctly set.
PATH_EXPORT_FILE = /tmp/fan-controller/latest-values.json